syntax = "proto3";

package virtm;

option go_package = "github.com/valar/virtm/api;api";

import "data.proto";

service VirtM {
    rpc CreateMachine(CreateMachineRequest) returns (CreateMachineResponse);
    rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);
    rpc GetMachineDetails(GetMachineDetailsRequest) returns (GetMachineDetailsResponse);
    rpc DeleteMachine(DeleteMachineRequest) returns (DeleteMachineResponse);

    rpc TriggerMachine(TriggerMachineRequest) returns (TriggerMachineResponse);

    rpc CreateSSHKey(CreateSSHKeyRequest) returns (CreateSSHKeyResponse);
    rpc ListSSHKeys(ListSSHKeysRequest) returns (ListSSHKeysResponse);
    rpc DeleteSSHKey(DeleteSSHKeyRequest) returns (DeleteSSHKeyResponse);

    rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
    rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
}

message CreateMachineRequest {
    string name = 1;
    Machine.Specs specs = 2;
    string image_id = 3;
    repeated string ssh_key_ids = 4;
    repeated string network_ids = 5;
}

message CreateMachineResponse {
    string id = 1;
}

message ListMachinesRequest {
}


message ListMachinesResponse {
    repeated Machine machines = 1;
}

message GetMachineDetailsRequest {
    string id = 1;
}

message GetMachineDetailsResponse {
    Machine machine = 1;
}

message DeleteMachineRequest {
    string id = 1;
}

message DeleteMachineResponse {
}

message CreateSSHKeyRequest {
    string name = 1;
    string pubkey = 2;
}

message CreateSSHKeyResponse {
    string id = 1;
}

message DeleteSSHKeyRequest {
    string id = 1;
}

message DeleteSSHKeyResponse {}

message ListSSHKeysRequest {}

message ListSSHKeysResponse {
    repeated SSHKey keys = 1;
}

message ListImagesRequest {}

message ListImagesResponse {
    repeated Image images = 1;
}

message ListNetworksRequest {}

message ListNetworksResponse {
    repeated Network networks = 1;
}

message TriggerMachineRequest {
    string id = 1;
    Event event = 2;

    enum Event {
        EVENT_UNKNOWN = 0;
        POWERON = 1;
        POWEROFF = 2;
        REBOOT = 3;
    }
}

message TriggerMachineResponse {
    Machine.Status status = 1;
}