// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtMClient is the client API for VirtM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtMClient interface {
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error)
	GetMachineDetails(ctx context.Context, in *GetMachineDetailsRequest, opts ...grpc.CallOption) (*GetMachineDetailsResponse, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
}

type virtMClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtMClient(cc grpc.ClientConnInterface) VirtMClient {
	return &virtMClient{cc}
}

func (c *virtMClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error) {
	out := new(CreateMachineResponse)
	err := c.cc.Invoke(ctx, "/virtm.VirtM/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtMClient) GetMachineDetails(ctx context.Context, in *GetMachineDetailsRequest, opts ...grpc.CallOption) (*GetMachineDetailsResponse, error) {
	out := new(GetMachineDetailsResponse)
	err := c.cc.Invoke(ctx, "/virtm.VirtM/GetMachineDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtMClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, "/virtm.VirtM/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtMServer is the server API for VirtM service.
// All implementations must embed UnimplementedVirtMServer
// for forward compatibility
type VirtMServer interface {
	CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error)
	GetMachineDetails(context.Context, *GetMachineDetailsRequest) (*GetMachineDetailsResponse, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
	mustEmbedUnimplementedVirtMServer()
}

// UnimplementedVirtMServer must be embedded to have forward compatible implementations.
type UnimplementedVirtMServer struct {
}

func (UnimplementedVirtMServer) CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (UnimplementedVirtMServer) GetMachineDetails(context.Context, *GetMachineDetailsRequest) (*GetMachineDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineDetails not implemented")
}
func (UnimplementedVirtMServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (UnimplementedVirtMServer) mustEmbedUnimplementedVirtMServer() {}

// UnsafeVirtMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtMServer will
// result in compilation errors.
type UnsafeVirtMServer interface {
	mustEmbedUnimplementedVirtMServer()
}

func RegisterVirtMServer(s grpc.ServiceRegistrar, srv VirtMServer) {
	s.RegisterService(&VirtM_ServiceDesc, srv)
}

func _VirtM_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtMServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtm.VirtM/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtMServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtM_GetMachineDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtMServer).GetMachineDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtm.VirtM/GetMachineDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtMServer).GetMachineDetails(ctx, req.(*GetMachineDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtM_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtMServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtm.VirtM/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtMServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtM_ServiceDesc is the grpc.ServiceDesc for VirtM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virtm.VirtM",
	HandlerType: (*VirtMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMachine",
			Handler:    _VirtM_CreateMachine_Handler,
		},
		{
			MethodName: "GetMachineDetails",
			Handler:    _VirtM_GetMachineDetails_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _VirtM_DeleteMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
